#!/usr/bin/env python3
import os.path
from aiogram import types, Dispatcher, Bot, executor
from loguru import logger
from config import *
from hh_raspberry import search_job, region_id
from read_vacancies import send_vacancies
from download_from_youtube import download_video_audio
from keyboard import commands
from exchange_rate import exchange, link_image
from system_info import get_system_info
from led_on_off import Led
from screenshot import get_screenshot
from shell import shell_cmd

bot = Bot(TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ """
    logger.info(f'{message.chat.id}: –°—Ç–∞—Ä—Ç –±–æ—Ç–∞')
    origin = ('–ù—É —á—Ç–æ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã? üòÑ –ñ–º–∏ –∫–Ω–æ–ø–∫–∏-–∫–æ–º–∞–Ω–¥—ã –≤–Ω–∏–∑—É\n[‚úîÔ∏è —Ä–∞–±–æ—Ç–∞ ‚úîÔ∏è] - '
              '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞ hh.ru\n–ö–∏–Ω—É–≤ —Å—Å—ã–ª–∫—É —Å youtube, –≤–∞–º –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–æ'
              ' –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ (–¥–æ 50MB), –∞ –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–æ–ø–∏—Å–∞—Ç—å audio, —Å–∫–∞—á–∞–Ω–∞'
              ' –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∞\n[üí≤ USD - EUR üí≤] - –ö—É—Ä—Å –≤–∞–ª—é—Ç USD, EUR, BTC, ETH')
    await bot.send_message(message.chat.id, origin, reply_markup=(await commands())[0])
    img_file = open(f'img/job.jpg', 'rb')
    await bot.send_photo(message.chat.id, photo=img_file)


@dp.message_handler()
async def text_message(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    """
    logger.info(f'{message.chat.id}: {message.text}')

    if message.text.startswith('*'):
        hr = message.text.split(' ')
        profession = ''
        if (hr[0] or hr[1]) in ['–†–µ—Å–ø—É–±–ª–∏–∫–∞', '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '–∫—Ä–∞–π', '–æ–±–ª–∞—Å—Ç—å']:
            hr[0] = hr[0] + ' ' + hr.pop(1)
        for i in hr:
            if i == hr[0]:
                continue
            if i == hr[len(hr) - 1]:
                break
            profession += ''.join(i + ' ')
        profession = profession.strip()
        region = region_id(hr[0][1:])
        days = hr[-1]
        if region is None:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        elif len(days) != 2 or not days.isdigit() or days == '00':
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞')
        else:
            if int(days) > 30:
                days = '30'
            search_job(message.chat.id, '', f'{profession}', f'{region}', f'{days}')
            count = 0
            text = f'vacancies/{message.chat.id}.txt'
            with open(text, 'r', encoding='utf-8') as txt:
                count += int(txt.readline().strip()[20:])
            if count > 10:
                await send_vacancies(message, bot)
            else:
                with open(text, 'r', encoding='utf-8') as txt:
                    await bot.send_message(message.chat.id, f'{txt.read()}')
            if os.path.exists(f'vacancies/{message.chat.id}.txt'):
                download_file = open(f'vacancies/{message.chat.id}.txt', 'rb')
                await bot.send_document(message.chat.id, download_file)

    elif message.text.startswith('#'):
        await shell_cmd(message, bot)

    elif message.text == 'üí≤ USD - EUR üí≤':
        await exchange(message, bot)

    elif message.text == "üßú –ö–∞—Ä—Ç–∏–Ω–∫—É? üßö‚Äç":
        await link_image(message, bot)

    elif message.text == "‚ú≥Ô∏è read file ‚ú≥Ô∏è":
        if message.chat.id in (USER_1, USER_2):
            await send_vacancies(message, bot)
        else:
            await bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª üòÑ')

    elif message.text == "üí° led on üí°":
        if message.chat.id in (USER_1, USER_2):
            led = Led()
            led.set_led_on_off(1)
            await bot.send_message(message.chat.id, '–í–∫–ª—é—á–∞—é —á–∞–π–Ω–∏–∫ üòÑ')
        else:
            await bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —á–∞–π–Ω–∏–∫ üòÑ')
    elif message.text == "üí° led off üí°":
        if message.chat.id in (USER_1, USER_2):
            led = Led()
            led.set_led_on_off(0)
            await bot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–∞—é —á–∞–π–Ω–∏–∫ üòÑ')
        else:
            await bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å —á–∞–π–Ω–∏–∫ üòÑ')

    elif message.text == "‚öôÔ∏è –º–æ–π id ‚öôÔ∏è":
        user_information = (f'*id - {message.chat.id}\n–ò–º—è - {message.from_user.full_name}\n'
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - @{message.chat.username}*')
        await bot.send_message(message.chat.id, user_information, parse_mode='Markdown')

    elif message.text == "üîê admin üîê":
        if message.chat.id in (USER_1, USER_2):
            await bot.send_message(message.chat.id, "‚ùáÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                   reply_markup=(await commands())[1])
        else:
            await bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üòÑ')
            alert = (f"–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –∑–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: {message.text}\n\nuser id: "
                     f"{message.from_user.id}\n"
                     f"first name: {message.from_user.first_name}\nlast name: "
                     f"{message.from_user.last_name}"
                     f"\nusername: @{message.from_user.username}")
            await bot.send_message(USER_1, alert)

    elif message.text == "‚úîÔ∏è —Ä–∞–±–æ—Ç–∞ ‚úîÔ∏è":
        if message.chat.id in (USER_5, USER_6):
            search_job(message.chat.id, '', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', '1979', '30')
            count = 0
            text = f'vacancies/{message.chat.id}.txt'
            with open(text, 'r', encoding='utf-8') as txt:
                count += int(txt.readline().strip()[20:])
            if count > 10:
                await send_vacancies(message, bot)
            else:
                with open(text, 'r', encoding='utf-8') as txt:
                    await bot.send_message(message.chat.id, f'{txt.read()}')
        else:
            example_search = ('*–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ*:\n\n`*`*[–≥–æ—Ä–æ–¥] ['
                              '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π] [—á–∏—Å–ª–æ –¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π '
                              '(max=30)]\n\n–ü—Ä–∏–º–µ—Ä—ã*:\n`*–í–æ—Ä–æ–Ω–µ–∂ –≤–æ–¥–∏—Ç–µ–ª—å 10`\n`*–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π '
                              '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä 30`\n`*–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ —É—á–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ 50000 07`\n\n–≥–¥–µ `*` '
                              '- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ,\n`–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫` - —ç—Ç–æ –≥–æ—Ä–æ–¥, –≤–∞–∫–∞–Ω—Å–∏–∏ '
                              '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è,\n`—É—á–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏` - –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–ª—è '
                              '–ø–æ–∏—Å–∫–∞,\n`50000` - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞,\n`07` - '
                              '–ø–æ–∏—Å–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.')
            await bot.send_message(message.chat.id, example_search, parse_mode='Markdown')

    elif message.text == '‚ùå stop ‚ùå':
        NEW[f'{message.chat.id}'] = 1
        logger.info(f'{NEW}')

    elif [i for i in ['https://youtu.be/', 'https://www.youtu.be/', 'https://youtube.com/',
                      'https://www.youtube.com/'] if message.text.startswith(i)]:
        await download_video_audio(message, bot)

    elif message.text == "‚õîÔ∏èreboot‚õîÔ∏è":
        if message.chat.id == USER_1:
            await bot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–∞—é üòÑ')
            try:
                from os import system
                system('reboot')
            except RuntimeError:
                logger.error('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞')

    elif message.text == "üñ•–û —Å–µ—Ä–≤–µ—Ä–µ":
        await get_system_info(message, bot)

    elif message.text == "‚úÖ–°–∫—Ä–∏–Ω—à–æ—Ç":
        await get_screenshot(message, bot)

    elif message.text == "‚è™–ù–∞–∑–∞–¥‚è™":
        await bot.send_message(message.chat.id, "‚ùóÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
                               reply_markup=(await commands())[0])

    else:
        fail = (f'*–ù–µ –Ω–∞–¥–æ –±–∞–ª–æ–≤–∞—Ç—å—Å—è* üò° *{message.chat.first_name}*\n\nüòú *–ò —Ç–µ–±–µ —Ç–æ–≥–æ –∂–µ:   '
                f'{message.text}*')
        await bot.send_message(message.chat.id, fail, parse_mode='Markdown')

if __name__ == '__main__':
    executor.start_polling(dp)
