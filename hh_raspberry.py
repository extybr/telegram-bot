from requests import get
from loguru import logger


def search_job(telegram_id, telegram_role: str, telegram_profession: str, telegram_area: str,
               telegram_period: str) -> None:
    """  –ü–∞—Ä—Å–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞ hh.ru """
    logger.info(f'–ü–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {telegram_id}, {telegram_role}, {telegram_profession}, '
                f'{telegram_area}, {telegram_period}')
    try:
        professional_role = f'&professional_role={telegram_role}' if len(telegram_role) > 1 else ''
        text_profession = f'&text={telegram_profession}'  # –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
        area = telegram_area  # —Ä–µ–≥–∏–æ–Ω
        publication_time = 'order_by=publication_time&'
        period = telegram_period  # –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞
        url = (f'https://api.hh.ru/vacancies?clusters=true&st=searchVacancy&enable_snippets=true&'
               f'{publication_time}period={period}&only_with_salary=false{professional_role}'
               f'{text_profession}&page=0&per_page=100&area={area}&responses_count_enabled=true')

        headers = {
            'Host': 'api.hh.ru',
            'User-Agent': 'Mozilla/5.0',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }

        logger.info('hh.ru: –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π')
        result = get(url, headers)
        results = result.json()
        count_vacancies = results.get('found')
        logger.info(f'–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {count_vacancies}')
        with open(f'vacancies/{telegram_id}.txt', 'w', encoding='utf-8') as text:
            text.write('–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + str(count_vacancies) + '\n\n')
        items = results.get('items', {})
        for index in items:
            company = index['employer']['name']
            name = index['name']
            link = index["alternate_url"]
            types = index['type']['name']
            date = index['published_at'][:10]
            address = index['area']['name']
            schedule = index['schedule']['name']
            if index['address']:
                address = index['address']['raw']
            salary = index['salary']
            # if company == '–°–ø–∞–º –ö–æ–º–ø–∞–Ω–∏—è'.strip():
            #     continue
            if count_vacancies > 0:
                text = open(f'vacancies/{telegram_id}.txt', 'a', encoding='utf-8')
                if salary:
                    from_salary = salary['from']
                    to_salary = salary['to']
                    if not isinstance(from_salary, int):
                        from_salary = 'üòú'
                    if not isinstance(to_salary, int):
                        to_salary = 'üöÄ'
                    output = (f'  {company}  '.center(50, '*') + f'\n\nüöÆ   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {name}\nüòç   '
                              f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {from_salary} - {to_salary}\n‚öú   –°—Å—ã–ª–∫–∞: {link}\nüêØ   '
                              f'/{types}/   -üåº-   –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}   -üåª-   –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: '
                              f'{schedule.lower()}\nüöò   –ê–¥—Ä–µ—Å: {address}\n')
                    text.write(output.center(50, '*') + '\n')
                else:
                    output = (f'  {company}  '.center(50, '*') + f'\n\nüöÆ   –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {name}\nüòç'
                              f'   –ó–∞—Ä–ø–ª–∞—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n‚öú   –°—Å—ã–ª–∫–∞: {link}\nüêØ   /{types}/'
                              f'   -üåº-   –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}   -üåª-   –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: '
                              f'{schedule.lower()}\nüö¶   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: '
                              f'\nüöò   –ê–¥—Ä–µ—Å: {address}\n')
                    text.write(output.center(50, '*') + '\n')
                text.close()
    except OSError as error:
        logger.error(f'–°—Ç–∞—Ç—É—Å: –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n{error}')


def region_id(region: str) -> str:
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ id —Ä–µ–≥–∏–æ–Ω–∞ """
    logger.info(f'–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞: {region}')
    try:
        url = f'https://api.hh.ru/suggests/areas?text={region}'
        headers = {
            'Host': 'api.hh.ru',
            'User-Agent': 'Mozilla/5.0',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive'
        }
        result = get(url, headers)
        results = result.json()
        items = results.get('items', {})
        id_region = [i['id'] for i in items]
        return id_region[0] if len(id_region) > 0 else None
    except OSError as error:
        logger.error(f'–°—Ç–∞—Ç—É—Å: –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n{error}')
