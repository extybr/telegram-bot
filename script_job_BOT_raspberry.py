#!/usr/bin/env python3
import os.path
from time import sleep
import requests
import telebot
from loguru import logger
from telebot import types
import RPi.GPIO as GPIO
from script_job_raspberry import search_jobs, region_id

token = 'bla-bla-bla'  # –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(token)
bot.remove_webhook()

USER_1 = 100000001
USER_2 = 100000002
USER_3 = 100000003
USER_4 = 100000004
USER_5 = 100000005
USER_6 = 100000006
NEW = dict()
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(25, GPIO.OUT)


@bot.message_handler(commands=['start'])
def start(message) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ """
    bot.clear_step_handler(message)
    logger.info(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('üí≤ USD - EUR üí≤')
    button_2 = types.KeyboardButton('üê∑ –í–æ–¥–∏—á–∫–∏? üê∑')
    button_3 = types.KeyboardButton('üôè —Ä–∞–±–æ—Ç–∞ üôè')
    button_4 = types.KeyboardButton('üö∑ bot_stop üö∑')
    button_5 = types.KeyboardButton('üòé read file üòé')
    button_6 = types.KeyboardButton('üåº led on üåº')
    button_7 = types.KeyboardButton('üåº led off üåº')
    button_8 = types.KeyboardButton('ü§ì –º–æ–π id ü§ì')
    button_9 = types.KeyboardButton('üö∑ stop üö∑')
    markup.row(button_1, button_3, button_9, button_8)
    markup.row(button_2, button_5, button_6, button_7, button_4)
    bot.send_message(message.chat.id, '–ù—É —á—Ç–æ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã? üòÑ –ñ–º–∏ –∫–Ω–æ–ø–∫–∏-–∫–æ–º–∞–Ω–¥—ã –≤–Ω–∏–∑—É',
                     reply_markup=markup)
    try:
        url = 'https://skyteach.ru/wp-content/cache/thumb/d7/81a695a40a5dfd7_730x420.jpg'
        bot.send_photo(message.chat.id, photo=url, reply_markup=markup)
    except Exception as er:
        logger.info(er)
        if str(er).find('Error code: 400'):
            img_file = open(f'vacancies/job.jpg', 'rb')
            bot.send_document(message.chat.id, img_file)


@bot.message_handler(content_types='text')
def message_reply(message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    –ü–∞—Ä—Å–∏—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    –ó–∞–ø—É—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—é: –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞ (—Ä–µ–ª–µ), –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    """
    logger.info(message.text)
    if message.text.startswith('*'):
        hr = message.text.split(' ')
        profession = ''
        for i in hr:
            if i == hr[0]:
                continue
            if i == hr[len(hr) - 1]:
                break
            profession += ''.join(i + ' ')
        profession = profession.strip()
        region = region_id(hr[0][1:])
        days = hr[len(hr) - 1]
        if region is None:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        elif len(days) != 2:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞')
        else:
            search_jobs(message.chat.id, '', f'{profession}', f'{region}', f'{days}')
            count = 0
            text = f'vacancies/{message.chat.id}.txt'
            with open(text, 'r', encoding='utf-8') as txt:
                count += int(txt.readline().strip()[20:])
            if count > 10:
                send_vacancies(message)
            else:
                with open(text, 'r', encoding='utf-8') as txt:
                    bot.send_message(message.chat.id, f'{txt.read()}')
            if os.path.exists(f'vacancies/{message.chat.id}.txt'):
                download_file = open(f'vacancies/{message.chat.id}.txt', 'rb')
                bot.send_document(message.chat.id, download_file)
    elif message.text.startswith('@'):
        import shlex
        import subprocess
        command = message.text[1:]
        args = command.split(' ')
        args.pop(0)
        clean = [shlex.quote(i) for i in args]
        full_command = shlex.split(f"{command} {''.join(clean)}")
        result = subprocess.run(full_command, capture_output=True).stdout.decode()
        bot.send_message(message.chat.id, f"{result}")
    elif message.text == 'üí≤ USD - EUR üí≤':
        # bot.send_message(message.chat.id, "https://cbr.ru/key-indicators/")
        try:
            binance = requests.get('https://api.binance.com/api/v1/ticker/24hr').json()
            price_btc, price_eth = 0, 0
            for coin in binance:
                if coin['symbol'] == 'BTCUSDT':
                    price_btc = int(float(coin.get('lastPrice', 0)))
                elif coin['symbol'] == 'ETHUSDT':
                    price_eth = int(float(coin.get('lastPrice', 0)))
            result_binance = f'BTCUSDT - {price_btc}  /  ETHUSDT - {price_eth}'
            bank = requests.get('https://www.cbr-xml-daily.ru/latest.js').json()
            bank_1 = round(1 / bank["rates"]['USD'], 3)
            bank_2 = round(1 / bank["rates"]['EUR'], 3)
            result_bank = f'USD - {bank_1}  /  EUR - {bank_2}'
            temperature = ''
            with open('/sys/class/thermal/thermal_zone0/temp', 'r') as termal:
                temperature = round(int(termal.read()) / 1000, 2)
                temperature = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = {temperature} 'C"
            bot.send_message(message.chat.id, f'–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –†–§:   {result_bank}\n–ë–∏—Ä–∂–∞ Binance:   '
                                              f'{result_binance}\n{temperature}')
        except OSError:
            print('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            bot.send_message(message.chat.id, '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    elif message.text == "üê∑ –í–æ–¥–∏—á–∫–∏? üê∑":
        try:
            url_img = ("https://bestwine24.ru/image/cache/catalog/vodka"
                       "/eef2e315f762519e75aba64a800b63e9-540x720.jpg")
            bot.send_photo(message.chat.id, photo=url_img)
        except Exception as er:
            logger.info(er)
            if str(er).find('Error code: 400'):
                img_file = open(f'vacancies/vodka.jpg', 'rb')
                bot.send_document(message.chat.id, img_file)
    elif message.text == "üòé read file üòé":
        if message.chat.id in (USER_1, USER_2):
            send_vacancies(message)
        else:
            bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª üòÑ')
    elif message.text == "üåº led on üåº":
        if message.chat.id == USER_2:
            GPIO.setwarnings(False)
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(25, GPIO.OUT)
            GPIO.output(25, GPIO.HIGH)
            bot.send_message(USER_2, '–í–∫–ª—é—á–∞—é —á–∞–π–Ω–∏–∫ üòÑ')
        else:
            bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —á–∞–π–Ω–∏–∫ üòÑ')
    elif message.text == "üåº led off üåº":
        if message.chat.id == USER_2:
            GPIO.setwarnings(False)
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(25, GPIO.OUT)
            GPIO.output(25, GPIO.LOW)
            bot.send_message(USER_2, '–í—ã–∫–ª—é—á–∞—é —á–∞–π–Ω–∏–∫ üòÑ')
        else:
            bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å —á–∞–π–Ω–∏–∫ üòÑ')
    elif message.text == "ü§ì –º–æ–π id ü§ì":
        bot.send_message(message.chat.id, f'id - {message.chat.id}\n–ò–º—è - {message.from_user.full_name}'
                                          f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.chat.username}')
    elif message.text == "üö∑ bot_stop üö∑":
        if message.chat.id == USER_1:
            bot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–∞—é –±–æ—Ç–∞ üòÑ')
            try:
                # bot.stop_polling()
                bot.stop_bot()
            except RuntimeError:
                print('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞')
        else:
            bot.send_message(message.chat.id, '–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞ üòÑ')
    elif message.text == "üôè —Ä–∞–±–æ—Ç–∞ üôè":
        if message.chat.id in (USER_5, USER_6):
            search_jobs(message.chat.id, '', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä', '1979', '30')
            count = 0
            text = f'vacancies/{message.chat.id}.txt'
            with open(text, 'r', encoding='utf-8') as txt:
                count += int(txt.readline().strip()[20:])
            if count > 10:
                send_vacancies(message)
            else:
                with open(text, 'r', encoding='utf-8') as txt:
                    bot.send_message(message.chat.id, f'{txt.read()}')
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:\n\n'
                                              '*[–≥–æ—Ä–æ–¥] [–ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π] [—á–∏—Å–ª–æ '
                                              '–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (max=30)]\n\n–ü—Ä–∏–º–µ—Ä—ã:\n\n'
                                              '*–í–æ—Ä–æ–Ω–µ–∂ –≤–æ–¥–∏—Ç–µ–ª—å 30\n\n'
                                              '*–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ —É—á–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ 50000 07\n\n'
                                              '–≥–¥–µ <*> - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ,\n'
                                              '<–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫> - —ç—Ç–æ –≥–æ—Ä–æ–¥, –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É '
                                              '–±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è,\n<—É—á–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏> - –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–ª—è '
                                              '–ø–æ–∏—Å–∫–∞,\n<50000> - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è '
                                              '–ø–æ–∏—Å–∫–∞,\n–∞ <07> - –ø–æ–∏—Å–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.')
    elif message.text == 'üö∑ stop üö∑':
        global NEW
        NEW[f'{message.chat.id}'] = 1
    else:
        bot.send_message(message.chat.id, f'–ù–µ –Ω–∞–¥–æ –±–∞–ª–æ–≤–∞—Ç—å—Å—è üò° {message.chat.first_name}\n\n'
                                          f'üòú –ò —Ç–µ–±–µ —Ç–æ–≥–æ –∂–µ:   {message.text}')


def send_vacancies(message) -> None:
    """ –ß–∏—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ """
    text = f'vacancies/{message.chat.id}.txt'
    count = 0
    count_local = 0
    with open(text, 'r', encoding='utf-8') as txt:
        count += int(txt.readline().strip()[20:])
        count_local += int(txt.read().strip().count('üöò'))
    count_spam = count - count_local
    if message.chat.id in (USER_5, USER_6):
        bot.send_message(message.chat.id, f'–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {count}. –í –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: '
                                          f'{count_local}. –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π-—Å–ø–∞–º–∞: {count_spam}.')
    else:
        bot.send_message(message.chat.id, f'–ß–∏—Å–ª–æ –≤–∞–∫–∞–Ω—Å–∏–π:  {count_local}')
    sleep(3)
    global NEW
    NEW[f'{message.chat.id}'] = 0
    if count > 0:
        with open(text, 'r', encoding='utf-8') as txt:
            for line in txt.readlines():
                if NEW[f'{message.chat.id}'] == 1:
                    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–π')
                    break
                elif len(line) < 3:
                    continue
                elif line.count('*') > 2:
                    bot.send_message(message.chat.id, line.strip())
                elif line.find('https://') != -1:
                    bot.send_message(message.chat.id, line.strip())
                elif line.startswith('üöò'):
                    sleep(5)
    NEW[f'{message.chat.id}'] = 0
    print(NEW)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except BaseException as error:
            print(error)
            sleep(30)
            continue
        finally:
            GPIO.cleanup()
